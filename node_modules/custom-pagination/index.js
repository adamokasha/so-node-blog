var paginateOptions = function(req) {
	var currentPage = Number(req.params.page) || 1;
	return {
		sort: { date: -1 },
		limit: 3,
		page: currentPage
	}
};

var userPaginateOptions = function(currentPage) {
	return {
		sort: { username: 1 },
		limit: 5,
		page: currentPage
	}
};

var buildPagesArray = function(posts,currentPage){
	var pagesArray = [];
	// maxPagesBeforeLast does not include last page(We want last array item to always be lastPage).
	var maxPagesBeforeLast = 4;
	var lastPage = posts.pages;

	console.log(lastPage);
	if(lastPage==1){
		console.log(pagesArray);
		return;
	}
	if(lastPage>1){
		if(currentPage<=maxPagesBeforeLast){
			if(lastPage<maxPagesBeforeLast){
				for(i=1;i<=lastPage; i++){
					pagesArray.push(i);
				}
				return pagesArray;
			}
			if (lastPage>maxPagesBeforeLast){
				for(i=1;i<=maxPagesBeforeLast; i++){
					pagesArray.push(i);
				}
				pagesArray.push(posts.pages);
				return pagesArray;
			}		
			if (lastPage === maxPagesBeforeLast){
				for(i=1;i<maxPagesBeforeLast;i++){
					pagesArray.push(i);
				}
				pagesArray.push(posts.pages);
				return pagesArray;
			}
		}
		
		if (currentPage>maxPagesBeforeLast && currentPage<lastPage){
			for(i=currentPage-(maxPagesBeforeLast-1);i<=currentPage;i++){
				pagesArray.push(i);
			}
			pagesArray.push(lastPage);
			return pagesArray;
		}

		if(currentPage == lastPage){
			if(lastPage<maxPagesBeforeLast){
				for(i=1;i<=lastPage;i++){
					pagesArray.push(i);
				}
				return pagesArray;
			}
			if (lastPage>maxPagesBeforeLast){	
				for(i=lastPage-maxPagesBeforeLast;i<=lastPage;i++){
					pagesArray.push(i);
				}
				return pagesArray;
			}			
		}
	}
}

var buildPagination = function(req, res, docs, pageToRender){
	var currentPage = Number(req.params.page) || 1;

	var category = req.params.category || null;

	var nextPage = currentPage+1
	var prevPage = currentPage-1;
	
	if(docs.pages<=1){
			res.render(pageToRender, { docs: docs.docs, category: category,  pages: buildPagesArray(docs, currentPage), prevDisabled: true, nextDisabled: true });
	} else {
		if (nextPage<=docs.pages && prevPage>=1){
			res.render(pageToRender, { docs: docs.docs, category: category, pages: buildPagesArray(docs, currentPage), nextpage: nextPage, prevpage: prevPage });
		}
		else if(prevPage<1) {
			res.render(pageToRender, { docs: docs.docs, category: category, pages: buildPagesArray(docs, currentPage), nextpage: nextPage, prevDisabled: true });
		}
		else{
			res.render(pageToRender, { docs: docs.docs, category: category, pages: buildPagesArray(docs, currentPage), prevpage: prevPage, nextDisabled: true })
		}
	}
}

exports.buildPagesArray = buildPagesArray;
exports.paginateOptions = paginateOptions;
exports.userPaginateOptions = userPaginateOptions;
exports.buildPagination = buildPagination;
